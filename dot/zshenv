#! /usr/bin/env zsh

# don't want global settings
unsetopt GLOBAL_RCS

# zshrc does compinit, so don't do it twice
skip_global_compinit=1

function extern() { echo "$HOME/thirdparty/$1" }

function executable() { which $1 >> /dev/null && [[ -x `which $1` ]] }
function isosx() { [[ `uname` = 'Darwin' ]] }
function isbsd() { [[ `uname` = 'FreeBSD' ]] }

echo ${XDG_CONFIG_HOME:=$HOME/.config} >> /dev/null
echo ${XDG_CACHE_HOME:=$HOME/.cache} >> /dev/null
echo ${XDG_DATA_HOME:=$HOME/.local/share} >> /dev/null
echo ${XDG_DATA_DIRS:=/usr/local/share:/usr/share} >> /dev/null
echo ${XDG_CONFIG_DIRS:=/etc/xdg} >> /dev/null

typeset -gU path
function init_path_base() {
  typeset -a bins
  if isosx; then
    bins=($HOME/Library/Python/2.7/bin /usr/local/sbin /usr/local/bin /usr/texbin)
  else
    bins=($HOME/.local/bin)
  fi
  [[ -d /opt/endurance/bin ]] && bins+=(/opt/endurance/bin)
  path=($bins $path)
}
function init_path_extern() {
  [[ -d $(extern julia/julia) ]] && path=($(extern julia/julia) $path)
  [[ -d /usr/local/MATLAB/R2011a ]] && path=($path /usr/local/MATLAB/R2011a/bin)
}
function init_path() {
  init_path_base
  init_path_extern
}
function init_aws() {
  local AWS_CONFIG=$HOME/etc/aws-config.ini
  [[ -f $AWS_CONFIG ]] && export AWS_CONFIG_FILE=$AWS_CONFIG
}

init_path
#init_aws

export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export HISTSIZE=10000

limit coredumpsize unlimited
limit datasize 1024m
! isbsd && limit addressspace "$(( 16 * 1024 ))m"

[[ -d $HOME/.zshenv.d ]] && for script in $HOME/.zshenv.d/*; do
  [[ -r "$script" ]] && source "$script"
done
